{% if force_flat_headers %}
#include "combinations.hpp"
{%else%}
#include "unit_system/combinations.hpp"
{% endif %}

{% for combination in combinations %}
sakurajin::unit_system::{{ combination.product }} sakurajin::unit_system::operator*(const sakurajin::unit_system::{{ combination.factor1 }}& v1, const sakurajin::unit_system::{{ combination.factor2 }}& v2){
    {{ combination.factor1 }} _v1 = sakurajin::unit_system::unit_cast(v1,v1.multiplier,0);
    {{ combination.factor2 }} _v2 = sakurajin::unit_system::unit_cast(v2,v2.multiplier,0);
    return {{ combination.product }}{_v1.value*_v2.value,_v1.multiplier*_v2.multiplier};
}

sakurajin::unit_system::{{ combination.factor2 }} sakurajin::unit_system::operator/(const sakurajin::unit_system::{{ combination.product }}& v1, const sakurajin::unit_system::{{ combination.factor1 }}& v2){
    {{ combination.product }} _v1 = sakurajin::unit_system::unit_cast(v1,v1.multiplier,0);
    {{ combination.factor1 }} _v2 = sakurajin::unit_system::unit_cast(v2,v2.multiplier,0);
    return {{ combination.factor2 }}{_v1.value/_v2.value,_v1.multiplier/_v2.multiplier};
}

{% if combination.factor1 != combination.factor2 %}
sakurajin::unit_system::{{ combination.product }} sakurajin::unit_system::operator*(const sakurajin::unit_system::{{ combination.factor2 }}& v1, const sakurajin::unit_system::{{ combination.factor1 }}& v2){
    {{ combination.factor2 }} _v1 = sakurajin::unit_system::unit_cast(v1,v1.multiplier,0);
    {{ combination.factor1 }} _v2 = sakurajin::unit_system::unit_cast(v2,v2.multiplier,0);
    return {{ combination.product }}{_v1.value*_v2.value,_v1.multiplier*_v2.multiplier};
}

sakurajin::unit_system::{{ combination.factor1 }} sakurajin::unit_system::operator/(const sakurajin::unit_system::{{ combination.product }}& v1, const sakurajin::unit_system::{{ combination.factor2 }}& v2){
    {{ combination.product }} _v1 = sakurajin::unit_system::unit_cast(v1,v1.multiplier,0);
    {{ combination.factor2 }} _v2 = sakurajin::unit_system::unit_cast(v2,v2.multiplier,0);
    return {{ combination.factor1 }}{_v1.value/_v2.value,_v1.multiplier/_v2.multiplier};
}
{% else %}
sakurajin::unit_system::{{ combination.product }} sakurajin::unit_system::square(const sakurajin::unit_system::{{ combination.factor1 }}& v1){
    return v1*v1;
}
{% endif %}
{% endfor %}
