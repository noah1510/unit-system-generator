#pragma once

#ifndef UNIT_SYSTEM_UNIT_TYPE_TEMPLATE
#error "do not directly include the std workarounds!"
#endif

#ifndef __has_include
    #define UNIT_SYSTEM_NO_HAS_INCLUDE
#endif

#ifdef UNIT_SYSTEM_NO_HAS_INCLUDE
    #define UNIT_SYSTEM_NO_CSTDDEF
    #define UNIT_SYSTEM_NO_CMATH
    #define UNIT_SYSTEM_NO_ALGORITHM
    #define UNIT_SYSTEM_NO_RATIO
    #define UNIT_SYSTEM_NO_IOSTREAM
    #define UNIT_SYSTEM_NO_CHRONO
#else
    #if __has_include("cstddef")
        #undef UNIT_SYSTEM_NO_CSTDDEF
    #else
        #define UNIT_SYSTEM_NO_CSTDDEF
    #endif
    
    #if __has_include("cmath")
        #undef UNIT_SYSTEM_NO_CMATH
    #else
        #define UNIT_SYSTEM_NO_CMATH
    #endif
    
    #if __has_include("algorithm")
        #undef UNIT_SYSTEM_NO_ALGORITHM
    #else
        #define UNIT_SYSTEM_NO_ALGORITHM
    #endif
    
    #if __has_include("ratio")
        #undef UNIT_SYSTEM_NO_RATIO
    #else
        #define UNIT_SYSTEM_NO_RATIO
    #endif
    
    #if __has_include("iostream")
        #undef UNIT_SYSTEM_NO_IOSTREAM
    #else
        #define UNIT_SYSTEM_NO_IOSTREAM
    #endif
    
    #if __has_include("chrono")
        #undef UNIT_SYSTEM_NO_CHRONO
    #else
        #define UNIT_SYSTEM_NO_CHRONO
    #endif
#endif
    

#ifdef UNIT_SYSTEM_NO_CSTDDEF
    namespace std{
        #include <stddef.h>
    }
    #define UNIT_SYSTEM_SIZE_T unsigned long long
#else
    #include <cstddef>
    #define UNIT_SYSTEM_SIZE_T std::size_t
#endif  

#ifdef UNIT_SYSTEM_NO_CMATH
    namespace std{
        #include <math.h>
    }
#else
    #include <cmath>
#endif

#ifdef UNIT_SYSTEM_NO_ALGORITHM
    #ifndef max
        namespace std{
            template <typename T>
            T max(T v1, T v2){
                return v1 > v2 ? v1 : v2;
            }
        }
    #endif
    
    #ifndef abs
        namespace std{
            template <typename T>
            T abs(T var){
                return var > 0 ? var : -var;
            }
        }
    #endif
#else
    #include <algorithm>
#endif

#ifdef UNIT_SYSTEM_NO_RATIO
    
    #include <stdint.h>
    #define UNIT_SYSTEM_INTMAX intmax_t
    
    namespace std{
        template <intmax_t numerator, intmax_t denumerator = 1>
        class ratio {
        public:
            typedef ratio<numerator, denumerator> type;
            static constexpr intmax_t n = numerator;
            static constexpr intmax_t d = denumerator;
        };
        
        typedef ratio<1,       1000000000000000000> atto;
        typedef ratio<1,          1000000000000000> femto;
        typedef ratio<1,             1000000000000> pico;
        typedef ratio<1,                1000000000> nano;
        typedef ratio<1,                   1000000> micro;
        typedef ratio<1,                      1000> milli;
        typedef ratio<1,                       100> centi;
        typedef ratio<1,                        10> deci;
        typedef ratio<                       10, 1> deca;
        typedef ratio<                      100, 1> hecto;
        typedef ratio<                     1000, 1> kilo;
        typedef ratio<                  1000000, 1> mega;
        typedef ratio<               1000000000, 1> giga;
        typedef ratio<            1000000000000, 1> tera;
        typedef ratio<         1000000000000000, 1> peta;
        typedef ratio<      1000000000000000000, 1> exa;

    }
#else
    #include <ratio>
     #define UNIT_SYSTEM_INTMAX std::intmax_t
#endif

#ifndef UNIT_SYSTEM_NO_IOSTREAM
#include <iostream>
#endif

#ifndef UNIT_SYSTEM_NO_CHRONO
#include <chrono>
#endif
