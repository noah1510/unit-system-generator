#pragma once

{% if force_flat_headers %}
#include "unit_t.hpp"
{% else %}
#include "unit_system/unit_t.hpp"
{% endif %}

{% if export_macro %}
#ifndef {{ export_macro }}
    #define {{ export_macro }}
#endif
{% endif %}

namespace sakurajin{
    namespace unit_system{
        class {{ export_macro }} {{ unit_name }} : public unit_t<{{ unit_id }}>{
        public:
            {{ unit_name }}();
            {{ unit_name }}(unit_t<{{ unit_id }}> val);
            explicit {{ unit_name }}(long double val);
            {{ unit_name }}(long double val, long double mult);
            {{ unit_name }}(long double val, long double mult, long double offset);
        };
        {% if create_literals %}

        inline namespace literals{
            {% for literal in literals %}
            {% if use_alternate_names %}
            {{ export_macro }} {{ unit_name }} operator "" _{{ literal.alternative }}(long double val);
            {{ export_macro }} {{ unit_name }} operator "" _{{ literal.alternative }}(unsigned long long int val);
            {% else %}
            {{ export_macro }} {{ unit_name }} operator "" _{{ literal.udl }}(long double val);
            {{ export_macro }} {{ unit_name }} operator "" _{{ literal.udl }}(unsigned long long int val);
            {% endif %}
            
            {% endfor %}
        }
        {% endif %}
    }
}
