import typing

{% for unit in units %}
class {{ unit.name }}:
    def __init__(
        self,
        value=0.0,
        multiplier=1.0,
        offset=0.0
    ):
        self.value = float(value)
        self.multiplier = float(multiplier)
        self.offset = float(offset)

    def __str__(self):
        return f'{self.cast_to_values().value} {{ unit.base_name }}'

    def __repr__(self):
        return f'{{ unit.name }}({self.value}, {self.multiplier}, {self.offset})'

    def __add__(self, other: '{{ unit.name }}') -> '{{ unit.name }}':
        other = other.cast_to_values(self.multiplier, self.offset)
        return {{ unit.name }}(self.value + other.value)

    def __sub__(self, other: '{{ unit.name }}') -> '{{ unit.name }}':
        other = other.cast_to_values(self.multiplier, self.offset)
        return {{ unit.name }}(self.value - other.value)

    def __truediv__(self, value: typing.Union[
        float,
        '{{ unit.name }}',
        {% if unit.divisions|length > 0 %}{% for div in unit.divisions %}
        '{{ div.divisor }}',{% endfor %}{% endif %}
    ]):
        if isinstance(value, float):
            return {{ unit.name }}(self.value / value)
        elif isinstance(value, {{ unit.name }}):
            v1 = self.cast_to_values()
            v2 = value.cast_to_values()
            return v1.value / v2.value
        {% if unit.divisions|length > 0 %}{% for div in unit.divisions %}
        elif isinstance(value,{{ div.divisor }}):
            v1 = self.cast_to_values(self.multiplier)
            v2 = value.cast_to_values(value.multiplier)
            return {{ div.result }}(v1.value / v2.value, v1.multiplier / v2.multiplier)
        {% endfor %}{% endif %}
        else:
            raise TypeError(f'Cannot divide {{ unit.name }} by {type(value)}')

    def __mul__(self, value: typing.Union[
        float,
        {% if unit.multiplications|length > 0 %}{% for mult in unit.multiplications %}
        '{{ mult.factor }}',{% endfor %}{% endif %}
    ]):
        if isinstance(value, float):
            return {{ unit.name }}(self.value * value)
        {% if unit.multiplications|length > 0 %}{% for mult in unit.multiplications %}
        elif isinstance(value, {{ mult.factor }}):
            v1 = self.cast_to_values(self.multiplier)
            v2 = value.cast_to_values(value.multiplier)
            return {{ mult.product }}(v1.value * v2.value, v1.multiplier * v2.multiplier)
        {% endfor %}{% endif %}
        else:
            raise TypeError(f'Cannot multiply {{ unit.name }} by {type(value)}')

    {% if unit.sqrt_result != '' %}
    def sqrt(self):
        v1 = self.cast_to_values(self.multiplier)
        return {{ unit.sqrt_result }}(v1.value ** 0.5, v1.multiplier ** 0.5)
    {% endif %}

    {% if unit.square_result != '' %}
    def square(self):
        v1 = self.cast_to_values(self.multiplier)
        return {{ unit.square_result }}(v1.value ** 2, v1.multiplier ** 2)
    {% endif %}

    def cast_to_other(self, other: '{{ unit.name }}'):
        return self.cast_to_values(other.multiplier, other.offset)

    def cast_to_values(self, multiplier: float = 1.0, offset: float = 0.0):
        base_value = self.value * self.multiplier + self.offset
        return {{ unit.name }}(base_value / multiplier - offset, multiplier, offset)
{% endfor %}



    