project(
    'unit-system',
    'cpp',
    default_options : [
        'cpp_std=c++17',
        'warning_level=3'
    ],
    version : '{{ version }}',
    meson_version: '>= 1.0.0',
)

#set windows linker argument
cpp = meson.get_compiler('cpp')

{% if export_macro %}
if target_machine.system() == 'windows'
    if get_option('buildtype') != 'static'
        add_project_arguments('-D{{ export_macro }}=__declspec(dllexport)', language: 'cpp')
    else
        add_project_arguments('-D{{ export_macro }}=__declspec(dllimport)', language: 'cpp')
    endif
endif
{% endif %}

incdirs = include_directories('include')
sources = [
    {% for unit_name in units %}
    'src/{{ unit_name }}.cpp',
    {% endfor %}
    {% if hasCombinations %}
    'src/combinations.cpp',
    {% endif %}
]

unit_system = library(
    'unit-system', 
    sources,
    version : meson.project_version(), 
    soversion : '0',
    include_directories : incdirs,
    install : true,
)

unit_system_dep = declare_dependency(
    include_directories : incdirs,
    link_with : unit_system,
    version: meson.project_version(),
)

pkg = import('pkgconfig')
pkg.generate(unit_system, subdirs: 'unit_system')

meson.override_dependency('unit-system', unit_system_dep)

if get_option('force_build_tests') or (get_option('build_tests') and not meson.is_subproject())
    subdir('tests')
endif
