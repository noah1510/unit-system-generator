{%if force_flat_headers %}
#include "{{ unit_name }}.hpp"
{% else %}
#include "unit_system/{{ unit_name }}.hpp"
{% endif %}

using namespace sakurajin::unit_system;

{{ unit_name }}::{{ unit_name }}(): {{ unit_name }}(0){}
{{ unit_name }}::{{ unit_name }}(unit_t<{{ unit_id }}> val): {{ unit_name }}(val.value,val.multiplier){}
{{ unit_name }}::{{ unit_name }}(long double val): {{ unit_name }}(val,1){}
{{ unit_name }}::{{ unit_name }}(long double val, long double mult ): unit_t<{{ unit_id }}>(val,mult){}
{{ unit_name }}::{{ unit_name }}(long double val, long double mult, long double offset ): unit_t<{{ unit_id }}>(val,mult,offset){}

std::ostream& ::sakurajin::unit_system::operator<<(std::ostream& os, const ::sakurajin::unit_system::{{ unit_name }}& t){
    auto t1 = ::sakurajin::unit_system::unit_cast(t,1);
    return os << t1.value << " {{ unit_base_name }}";
}

{% if create_literals %}
{% for literal in literals %}
{% if use_alternate_names %}
{{ unit_name }} literals::operator "" _{{ literal.alternative }}(long double len){
    return {{ unit_name }}{len,{{ literal.multiplier }}, {{ literal.offset }}};
}

{{ unit_name }} literals::operator "" _{{ literal.alternative }}(unsigned long long int len){
    return {{ unit_name }}{static_cast<long double>(len),{{ literal.multiplier }}, {{ literal.offset }}};
}
{% else %}
{{ unit_name }} literals::operator "" _{{ literal.udl }}(long double len){
    return {{ unit_name }}{len,{{ literal.multiplier }}, {{ literal.offset }}};
}

{{ unit_name }} literals::operator "" _{{ literal.udl }}(unsigned long long int len){
    return {{ unit_name }}{static_cast<long double>(len),{{ literal.multiplier }}, {{ literal.offset }}};
}
{% endif %}
{% endfor %}
{% endif %}
