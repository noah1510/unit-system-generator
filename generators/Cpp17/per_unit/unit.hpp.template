#pragma once

#ifndef UNIT_SYSTEM_EXPORT_MACRO
    #define UNIT_SYSTEM_EXPORT_MACRO
#endif

#include <cstddef>
#include <cmath>
#include <algorithm>
#include <ratio>
#include <iostream>
#include <chrono>

namespace sakurajin{
    namespace unit_system{
        class UNIT_SYSTEM_EXPORT_MACRO {{ name }} {
        public:
            const long double multiplier;
            long double value = 0;
            const long double offset;
            long double rel_error = 0.000001;

            {{ name }}();
            {{ name }}(const {{ name }}& other) = default;

            explicit {{ name }}(long double v);
            {{ name }}(long double v, long double mult);
            {{ name }}(long double v, long double mult, long double off);

            template<std::intmax_t numerator, std::intmax_t denumerator = 1>
            {{ name }}(long double v, std::ratio<numerator, denumerator> mult, long double off = 0);

            {{ name }} operator*(long double scalar) const;
            void operator*=(long double scalar);

            long double operator/(const {{ name }}& other) const;
            {{ name }} operator/(long double scalar) const;
            void operator/=(long double scalar);

            {{ name }} operator+(const {{ name }}& other) const;
            void operator+=(const {{ name }}& other);

            {{ name }} operator-(const {{ name }}& other) const;
            void operator-=(const {{ name }}& other);

            {{ name }} operator-() const;

            void operator=(const {{ name }}& other);

            explicit operator long double() const;

            #if __cplusplus >= 202002L
                int operator<=>(const {{ name }}& other) const;
            #else
                bool operator<(const {{ name }}& other) const;
                bool operator>(const {{ name }}& other) const;
                bool operator<=(const {{ name }}& other) const;
                bool operator>=(const {{ name }}& other) const;
                bool operator==(const {{ name }}& other) const;
                bool operator!=(const {{ name }}& other) const;
            #endif
        };

        UNIT_SYSTEM_EXPORT_MACRO {{ name }} unit_cast(const {{ name }}& unit, long double new_multiplier = 1, long double new_offset = 0);
        UNIT_SYSTEM_EXPORT_MACRO {{ name }} clamp(const {{ name }}& unit, const {{ name }}& lower, const {{ name }}& upper);
        UNIT_SYSTEM_EXPORT_MACRO std::ostream& operator<<(std::ostream& os, const {{ name }}& t);

        {% if literals|length > 0 %}
        inline namespace literals{
            {% for literal in literals %}
            {% if use_alternate_names %}
            UNIT_SYSTEM_EXPORT_MACRO {{ name }} operator "" _{{ literal.alternative }}(long double val);
            UNIT_SYSTEM_EXPORT_MACRO {{ name }} operator "" _{{ literal.alternative }}(unsigned long long int val);
            {% else %}
            UNIT_SYSTEM_EXPORT_MACRO {{ name }} operator "" _{{ literal.udl }}(long double val);
            UNIT_SYSTEM_EXPORT_MACRO {{ name }} operator "" _{{ literal.udl }}(unsigned long long int val);
            {% endif %}
            {% endfor %}
        }
        {% endif %}
    }
}

namespace std{
    UNIT_SYSTEM_EXPORT_MACRO sakurajin::unit_system::{{ name }} abs(const sakurajin::unit_system::{{ name }}& unit);
}

template<std::intmax_t numerator, std::intmax_t denumerator>
sakurajin::unit_system::{{ name }}::{{ name }}(long double v, std::ratio<numerator, denumerator>, long double off): {{name}}{
    v, static_cast<long double>(numerator)/static_cast<long double>(denumerator), off
}{}
