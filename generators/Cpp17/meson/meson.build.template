project(
    'unit-system',
    'cpp',
    default_options : [
        'cpp_std=c++17',
        'warning_level=3'
    ],
    version : '{{ version }}',
    meson_version: '>= 1.1.0',
)

#set windows linker argument
cpp = meson.get_compiler('cpp')

{% if export_macro %}
if target_machine.system() == 'windows'
    if get_option('buildtype') != 'static'
        add_project_arguments('-D{{ export_macro }}=__declspec(dllexport)', language: 'cpp')
    else
        add_project_arguments('-D{{ export_macro }}=__declspec(dllimport)', language: 'cpp')
    endif
endif
{% endif %}

incdirs = include_directories('include')
sources = [
    {% for unit in units %}
    'src/{{ unit.name }}.cpp',
    {% endfor %}
    'src/combinations.cpp',
]

unit_system = library(
    'unit-system', 
    sources,
    version : meson.project_version(), 
    soversion : '0',
    include_directories : incdirs,
    install : true,
)

unit_system_dep = declare_dependency(
    include_directories : incdirs,
    link_with : unit_system,
    version: meson.project_version(),
)

pkg = import('pkgconfig')
pkg.generate(unit_system, subdirs: 'unit_system')

{% for unit in units %}
    install_headers('include/unit_system/{{ unit.name }}.hpp', subdir : 'unit-system')
{% endfor %}

install_headers('include/unit_system/combinations.hpp', subdir : 'unit-system')
install_headers('include/unit_system/constants.hpp', subdir : 'unit-system')
install_headers('include/unit_system/unit_t.hpp', subdir : 'unit-system')
install_headers('include/unit_system/units.hpp', subdir : 'unit-system')
install_headers('include/unit_system/std_implements.hpp', subdir : 'unit-system')
install_headers('include/unit_system.hpp')

meson.override_dependency('unit-system', unit_system_dep)

build_tests = get_option('build_tests').enable_auto_if(not meson.is_subproject())
if build_tests.enabled()
    subdir('tests')
endif
