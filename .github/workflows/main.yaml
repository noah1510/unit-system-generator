name: "main-ci"

on: [push]

jobs:
  dektop_matrix:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-20.04", "ubuntu-22.04", "macos-latest", "windows-latest"]
        buildType: ["static", "shared"]
        useMsys: [true, false]
        exclude:
          - useMsys: true
            os: "ubuntu-20.04"
          - useMsys: true
            os: "ubuntu-22.04"
          - useMsys: true
            os: "macos-latest"
        include:
          - script_file: "source ./.venv/bin/activate"
            os: "ubuntu-20.04"
          - script_file: "source ./.venv/bin/activate"
            os: "ubuntu-22.04"
          - script_file: "source ./.venv/bin/activate"
            os: "macos-latest"
          - script_file: ".venv/Scripts/activate.ps1"
            os: "windows-latest"
          - setupExtras: "-Db_lto=false -Dgtest:b_lto=false"
            os: "windows-latest"
            
    name: ${{ matrix.os }} ${{ matrix.buildType }} msys ${{ matrix.useMsys }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - name: default - setup venv
        run: python3 -m venv .venv
      - name: default - install pip deps
        run: |
            ${{ matrix.script_file }}
            pip install -r requirements.txt
            
      - name: generate the sources
        run: | 
            ${{ matrix.script_file }}
            python3 ./genSources.py
            
      - name: default - Prepare MSVC
        if: ${{ !matrix.useMsys && matrix.os == 'windows-latest' }}
        uses: bus1/cabuild/action/msdevshell@v1
        with:
            architecture: x64
      
      - name: default - install meson and ninja
        if: ${{ !matrix.useMsys }}
        run: | 
            pipx install meson
            pipx install ninja
      
      - name: default - setup the project
        if: ${{ !matrix.useMsys }}
        run: |
            cd output
            meson setup ${{ matrix.setupExtras }} -Ddefault_library=${{ matrix.buildType }} build
      - name: default - compile the project
        if: ${{ !matrix.useMsys }}
        run: meson compile -C output/build
      - name: default - test the project
        if: ${{ !matrix.useMsys }}
        run: meson test --verbose -C output/build
    
      - uses: msys2/setup-msys2@v2
        if: ${{ matrix.useMsys }}
        with:
          update: true
          install: >-
            base-devel
            mingw-w64-x86_64-python3
            mingw-w64-x86_64-python-pip
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-pkg-config
      
      - name: msys2 - setup the project
        if: ${{ matrix.useMsys }}
        shell: msys2 {0}
        run: |
            cd output
            meson setup ${{ matrix.setupExtras }} -Ddefault_library=${{ matrix.buildType }} build
      - name: msys2 - compile the project
        if: ${{ matrix.useMsys }}
        shell: msys2 {0}
        run: meson compile -C output/build
      - name: msys2 - test the project
        if: ${{ matrix.useMsys }}
        shell: msys2 {0}
        run: meson test --verbose -C output/build
            
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: build-artifact-${{ matrix.os }}-${{ matrix.buildType }}-msys-${{ matrix.useMsys }}
          path: build

  arduino_matix:
    runs-on: ubuntu-latest
    env:
      SKETCHES_REPORTS_PATH: sketches-reports
      LIBRARIES: |
        - source-path: ./output

    strategy:
      fail-fast: false
      matrix:
        board:
          - fqbn: arduino:avr:uno
            platforms: |
              - name: arduino:avr

          - fqbn: arduino:samd:mkr1000
            platforms: |
              - name: arduino:samd
          - fqbn: arduino:samd:mkrzero
            platforms: |
              - name: arduino:samd
          - fqbn: arduino:samd:mkrwifi1010
            platforms: |
              - name: arduino:samd
          - fqbn: arduino:samd:mkrfox1200
            platforms: |
              - name: arduino:samd
          - fqbn: arduino:samd:mkrwan1300
            platforms: |
              - name: arduino:samd
          - fqbn: arduino:samd:mkrwan1310
            platforms: |
              - name: arduino:samd
          - fqbn: arduino:samd:mkrgsm1400
            platforms: |
              - name: arduino:samd
          - fqbn: arduino:samd:mkrnb1500
            platforms: |
              - name: arduino:samd
          - fqbn: arduino:samd:mkrvidor4000
            platforms: |
              - name: arduino:samd
          - fqbn: arduino:mbed_portenta:envie_m7
            platforms: |
              - name: arduino:mbed_portenta
          - fqbn: arduino:mbed_portenta:envie_m4
            platforms: |
              - name: arduino:mbed_portenta
          - fqbn: arduino:mbed_nano:nano33ble
            platforms: |
              - name: arduino:mbed_nano
          - fqbn: arduino:mbed_nano:nanorp2040connect
            platforms: |
              - name: arduino:mbed_nano
          - fqbn: arduino:mbed_edge:edge_control
            platforms: |
              - name: arduino:mbed_edge
          - fqbn: esp32:esp32:esp32
            platforms: |
              - name: esp32:esp32
                source-url: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
          - fqbn: rp2040:rp2040:rpipico
            platforms: |
              - name: rp2040:rp2040
                source-url: https://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json
            
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v4
        with:
            python-version: '3.11'
            
      - name: create venv and install deps
        run: | 
          python3 -m venv .venv
          source ./.venv/bin/activate
          pip install pyserial
          pip install -r requirements.txt
      
      - name: generate the arduino sources
        run: |
          source ./.venv/bin/activate
          python3 ./genSources.py --arduino
        
      - name: Compile examples
        uses: arduino/compile-sketches@v1
        with:
          fqbn: ${{ matrix.board.fqbn }}
          platforms: ${{ matrix.board.platforms }}
          enable-deltas-report: true
          libraries: ${{ env.LIBRARIES }}
          sketch-paths: "output/examples"
          sketches-report-path: ${{ env.SKETCHES_REPORTS_PATH }}
          cli-compile-flags: |
            - --warnings
            - default
            
      - name: Save memory usage change report as artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.SKETCHES_REPORTS_PATH }}
          path: ${{ env.SKETCHES_REPORTS_PATH }}
          
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: build-artifact
          path: .
          
  releases:
    name: "Release"
    runs-on: "ubuntu-22.04"
    needs: dektop_matrix
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - name: setup environment and generate sources
        run: |
            pipx install meson
            pipx install ninja
            python3 -m venv .venv
            source ./.venv/bin/activate
            pip install -r requirements.txt
            python3 ./genSources.py --outDir=output_meson
            python3 ./genSources.py --arduino --outDir=output_arduino
      - name: setup and compile meson sources
        run: |
            mkdir sources-meson
            cd output_meson
            meson setup -Dbuild_tests=disabled -Dprefix=$(pwd)/../sources-meson build
            meson compile -C build
            meson install -C build
      
      - name: "Release latest"
        uses: "marvinpinto/action-automatic-releases@latest"
        if: ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}
        with:
          repo_token: "${{ secrets.CI_GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            LICENSE
            sources-meson
            output_arduino
            
      - name: "release candidate"
        uses: "marvinpinto/action-automatic-releases@latest"
        if: ${{ github.ref_type == 'tag' && startsWith(github.ref_name, 'v') && endsWith(github.ref_name, '-rc') }}
        with:
          repo_token: "${{ secrets.CI_GITHUB_TOKEN }}"
          prerelease: true
          files: |
            LICENSE
            sources-meson
            output_arduino
            
      - name: "release"
        uses: "marvinpinto/action-automatic-releases@latest"
        if: ${{ github.ref_type == 'tag' && startsWith(github.ref_name, 'v') && !endsWith(github.ref_name, '-rc') }}
        with:
          repo_token: "${{ secrets.CI_GITHUB_TOKEN }}"
          prerelease: false
          files: |
            LICENSE
            sources-meson
            output_arduino
  

