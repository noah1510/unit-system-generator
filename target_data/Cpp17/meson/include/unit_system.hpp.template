{% extends "generic/unit_system.template_local" %}

{% block include_area %}
{{ super() }}
#include <cstddef>
#include <cmath>
#include <algorithm>
#include <ratio>
#include <iostream>
#include <chrono>

#ifndef UNIT_SYSTEM_EXPORT_MACRO
    #define UNIT_SYSTEM_EXPORT_MACRO
#endif
{%endblock%}

{% block std_compat %}{% if extra_data.has_std %}
{{ super() }}

{% for unit in units %}
template<std::intmax_t numerator, std::intmax_t denumerator>
sakurajin::unit_system::{{ unit.name }}::{{ unit.name }}(long double v, std::ratio<numerator, denumerator>, long double off): {{unit.name}}{
    v, static_cast<long double>(numerator)/static_cast<long double>(denumerator), off
}{}
{% endfor %}

namespace std{
    {% for unit in units %}{{ extra_data.export_macro }} sakurajin::unit_system::{{ unit.name }} abs(const sakurajin::unit_system::{{ unit.name }}& unit);
    {% endfor %}
}


//add compatibility with std::chrono
namespace sakurajin{
    namespace unit_system{
        template<class Rep, class Period = std::ratio<1> >
        time_si unit_cast(const std::chrono::duration<Rep, Period>& other, long double new_multiplier = 1.0){
            auto t = std::chrono::duration_cast<std::chrono::duration<double, std::ratio<1,1>>>(other);
            auto retval = time_si{t.count(), 1};
            return unit_cast(retval, new_multiplier);
        }
    }
}
{% endif %}{% endblock %}

