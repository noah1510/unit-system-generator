#pragma once

#include <cstddef>
#include <cmath>
#include <algorithm>
#include <ratio>
#include <iostream>
#include <chrono>

#ifndef UNIT_SYSTEM_EXPORT_MACRO
    #define UNIT_SYSTEM_EXPORT_MACRO
#endif

namespace sakurajin{
    namespace unit_system{
        //forward declare all units
        {% for unit in units %}
        class {{ unit.name }};{% endfor %}

        {% for unit in units %}
        class UNIT_SYSTEM_EXPORT_MACRO {{ unit.name }} {
        public:
            const long double multiplier;
            long double value = 0;
            const long double offset;
            long double rel_error = 0.000001;

            {{ unit.name }}();
            {{ unit.name }}(const {{ unit.name }}& other) = default;

            explicit {{ unit.name }}(long double v);
            {{ unit.name }}(long double v, long double mult);
            {{ unit.name }}(long double v, long double mult, long double off);

            template<std::intmax_t numerator, std::intmax_t denumerator = 1>
            {{ unit.name }}(long double v, std::ratio<numerator, denumerator> mult, long double off = 0);

            {{ unit.name }} operator*(long double scalar) const;
            void operator*=(long double scalar);

            long double operator/(const {{ unit.name }}& other) const;
            {{ unit.name }} operator/(long double scalar) const;
            void operator/=(long double scalar);

            {{ unit.name }} operator+(const {{ unit.name }}& other) const;
            void operator+=(const {{ unit.name }}& other);

            {{ unit.name }} operator-(const {{ unit.name }}& other) const;
            void operator-=(const {{ unit.name }}& other);

            {{ unit.name }} operator-() const;

            void operator=(const {{ unit.name }}& other);

            explicit operator long double() const;

            {{ unit.name }} convert_multiplier(long double new_multiplier = 1) const;
            {{ unit.name }} convert_offset(long double new_offset = 0) const;
            {{ unit.name }} convert_copy(long double new_multiplier = 1, long double new_offset = 0) const;

            #if __cplusplus >= 202002L
                int operator<=>(const {{ unit.name }}& other) const;
            #else
                bool operator<(const {{ unit.name }}& other) const;
                bool operator>(const {{ unit.name }}& other) const;
                bool operator<=(const {{ unit.name }}& other) const;
                bool operator>=(const {{ unit.name }}& other) const;
                bool operator==(const {{ unit.name }}& other) const;
                bool operator!=(const {{ unit.name }}& other) const;
            #endif

        {% if unit.divisions|length > 0 %}{% for div in unit.divisions %}
        {{ div.result }} operator/(const {{ div.divisor }}& other) const; {% endfor %}{% endif %}

        {% if unit.multiplications|length > 0 %}{% for mult in unit.multiplications %}
        {{ mult.product }} operator*(const {{ mult.factor }}& other) const; {% endfor %}{% endif %}

        {% if unit.square_result != '' %}{{ unit.square_result }} square() const;{% endif %}
        {% if unit.sqrt_result != '' %}{{ unit.sqrt_result }} sqrt() const;{% endif %}

        };

        {% if unit.square_result != '' %}UNIT_SYSTEM_EXPORT_MACRO {{ unit.square_result }} square(const {{ unit.name}}& unit);{% endif %}
        {% if unit.sqrt_result != '' %}UNIT_SYSTEM_EXPORT_MACRO {{ unit.sqrt_result }} sqrt(const {{ unit.name}}& unit);{% endif %}
        UNIT_SYSTEM_EXPORT_MACRO {{ unit.name }} unit_cast(const {{ unit.name }}& unit, long double new_multiplier = 1, long double new_offset = 0);
        UNIT_SYSTEM_EXPORT_MACRO {{ unit.name }} clamp(const {{ unit.name }}& unit, const {{ unit.name }}& lower, const {{ unit.name }}& upper);
        UNIT_SYSTEM_EXPORT_MACRO std::ostream& operator<<(std::ostream& os, const {{ unit.name }}& t);

        {% if unit.literals|length > 0 %}
        inline namespace literals{
            {% for literal in unit.literals %}
            {% if use_alternate_names %}
            UNIT_SYSTEM_EXPORT_MACRO {{ unit.name }} operator "" _{{ literal.alternative }}(long double val);
            UNIT_SYSTEM_EXPORT_MACRO {{ unit.name }} operator "" _{{ literal.alternative }}(unsigned long long int val);
            {% else %}
            UNIT_SYSTEM_EXPORT_MACRO {{ unit.name }} operator "" _{{ literal.udl }}(long double val);
            UNIT_SYSTEM_EXPORT_MACRO {{ unit.name }} operator "" _{{ literal.udl }}(unsigned long long int val);
            {% endif %}
            {% endfor %}
        }
        {% endif %}

        {% endfor %}
    }
}

{% for unit in units %}
template<std::intmax_t numerator, std::intmax_t denumerator>
sakurajin::unit_system::{{ unit.name }}::{{ unit.name }}(long double v, std::ratio<numerator, denumerator>, long double off): {{unit.name}}{
    v, static_cast<long double>(numerator)/static_cast<long double>(denumerator), off
}{}
{% endfor %}

namespace std{
    {% for unit in units %}UNIT_SYSTEM_EXPORT_MACRO sakurajin::unit_system::{{ unit.name }} abs(const sakurajin::unit_system::{{ unit.name }}& unit);
    {% endfor %}
}


//add compatibility with std::chrono
namespace sakurajin{
    namespace unit_system{
        template<class Rep, class Period = std::ratio<1> >
        time_si unit_cast(const std::chrono::duration<Rep, Period>& other, long double new_multiplier = 1.0){
            auto t = std::chrono::duration_cast<std::chrono::duration<double, std::ratio<1,1>>>(other);
            auto retval = time_si{t.count(), 1};
            return unit_cast(retval, new_multiplier);
        }
    }
}

//add all constants
namespace sakurajin{
    namespace unit_system{
        namespace constants{
            {% for constant in constants %}
            const long double {{ constant.name }} = {{ constant.value }};
            {% endfor %}
        }
    }
}
