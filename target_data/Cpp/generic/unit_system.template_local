#pragma once

{% block include_area %}{% endblock %}

namespace sakurajin{
    namespace unit_system{
        //forward declare all units
        {% for unit in units %}
        class {{ unit.name }};{% endfor %}

        {% for unit in units %}
        class {{ extra_data.export_macro }} {{ unit.name }} {
        public:
            const long double multiplier;
            long double value = 0;
            const long double offset;
            long double rel_error = 0.000001;

            {{ unit.name }}();
            {{ unit.name }}(const {{ unit.name }}& other) = default;

            explicit {{ unit.name }}(long double v);
            {{ unit.name }}(long double v, long double mult);
            {{ unit.name }}(long double v, long double mult, long double off);

            {% if extra_data.has_std %}
            template<std::intmax_t numerator, std::intmax_t denumerator = 1>
            {{ unit.name }}(long double v, std::ratio<numerator, denumerator> mult, long double off = 0);
            {% endif %}

            {{ unit.name }} operator*(long double scalar) const;
            void operator*=(long double scalar);

            long double operator/(const {{ unit.name }}& other) const;
            {{ unit.name }} operator/(long double scalar) const;
            void operator/=(long double scalar);

            {{ unit.name }} operator+(const {{ unit.name }}& other) const;
            void operator+=(const {{ unit.name }}& other);

            {{ unit.name }} operator-(const {{ unit.name }}& other) const;
            void operator-=(const {{ unit.name }}& other);

            {{ unit.name }} operator-() const;

            void operator=(const {{ unit.name }}& other);

            explicit operator long double() const;

            [[nodiscard]]{{ unit.name }} convert_multiplier(long double new_multiplier = 1) const;
            [[nodiscard]]{{ unit.name }} convert_offset(long double new_offset = 0) const;
            [[nodiscard]]{{ unit.name }} convert_copy(long double new_multiplier = 1, long double new_offset = 0) const;

            //returns a copy of the unit with the same multiplier and offset as the other unit
            [[nodiscard]]{{ unit.name }} convert_like(const {{ unit.name }}& other) const;

            {% if extra_data.has_std %} #if __cplusplus >= 202002L
                int operator<=>(const {{ unit.name }}& other) const;
            #endif {% endif %}
                bool operator<(const {{ unit.name }}& other) const;
                bool operator>(const {{ unit.name }}& other) const;
                bool operator<=(const {{ unit.name }}& other) const;
                bool operator>=(const {{ unit.name }}& other) const;
                bool operator==(const {{ unit.name }}& other) const;
                bool operator!=(const {{ unit.name }}& other) const;

        {% if unit.divisions|length > 0 %}{% for div in unit.divisions %}
        [[nodiscard]]{{ div.result }} operator/(const {{ div.divisor }}& other) const; {% endfor %}{% endif %}

        {% if unit.multiplications|length > 0 %}{% for mult in unit.multiplications %}
        [[nodiscard]]{{ mult.product }} operator*(const {{ mult.factor }}& other) const; {% endfor %}{% endif %}

        {% if unit.square_result != '' %}[[nodiscard]]{{ unit.square_result }} square() const;{% endif %}
        {% if unit.sqrt_result != '' %}[[nodiscard]]{{ unit.sqrt_result }} sqrt() const;{% endif %}

        };

        {% if unit.square_result != '' %}{{ extra_data.export_macro }} {{ unit.square_result }} square(const {{ unit.name}}& unit);{% endif %}
        {% if unit.sqrt_result != '' %}{{ extra_data.export_macro }} {{ unit.sqrt_result }} sqrt(const {{ unit.name}}& unit);{% endif %}
        {{ extra_data.export_macro }} {{ unit.name }} unit_cast(const {{ unit.name }}& unit, long double new_multiplier = 1, long double new_offset = 0);
        {{ extra_data.export_macro }} {{ unit.name }} clamp(const {{ unit.name }}& unit, const {{ unit.name }}& lower, const {{ unit.name }}& upper);
        {% if extra_data.has_std %}{{ extra_data.export_macro }} std::ostream& operator<<(std::ostream& os, const {{ unit.name }}& t);{% endif %}

        {% if unit.literals|length > 0 %}
        inline namespace literals{
            {% for literal in unit.literals %}
            {{ extra_data.export_macro }} {{ unit.name }} operator "" _{{ literal.code_literal }}(long double val);
            {{ extra_data.export_macro }} {{ unit.name }} operator "" _{{ literal.code_literal }}(unsigned long long int val);
            {% endfor %}
        }
        {% endif %}

        {{ extra_data.export_macro }} {{ unit.name }} operator*(long double scalar, const {{ unit.name }}& value);

        {% endfor %}
    }
}

{% block std_compat %}{% endblock %}

//add all constants
namespace sakurajin{
    namespace unit_system{
        namespace constants{
            {% for constant in constants %}
            const long double {{ constant.name }} = {{ constant.value }};
            {% endfor %}
        }
    }
}
