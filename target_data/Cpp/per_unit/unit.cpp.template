#include "unit_system.hpp"
#include "{{ extra_data.math_provider }}"

sakurajin::unit_system::{{ name }}::{{ name }}(): {{ name }}{0.0}{}
sakurajin::unit_system::{{ name }}::{{ name }}(long double v): {{ name }}{v,1,0}{}
sakurajin::unit_system::{{ name }}::{{ name }}(long double v, long double mult): {{ name }}{v,mult,0}{}
sakurajin::unit_system::{{ name }}::{{ name }}(long double v, long double mult, long double off): multiplier{mult}, value{v}, offset{off}{}

//const functions
sakurajin::unit_system::{{ name }} sakurajin::unit_system::{{ name }}::operator*(long double scalar) const{
    return sakurajin::unit_system::{{ name }}{value*scalar, multiplier, offset};
}

sakurajin::unit_system::{{ name }} operator*(long double scalar, const sakurajin::unit_system::{{ name }}& val){
    return sakurajin::unit_system::{{ name }}{val.value*scalar, val.multiplier, val.offset};
}

long double sakurajin::unit_system::{{ name }}::operator/(const sakurajin::unit_system::{{ name }}& other) const{
    return value/other.convert_like(*this).value;
}

sakurajin::unit_system::{{ name }} sakurajin::unit_system::{{ name }}::operator/(long double scalar) const{
    return sakurajin::unit_system::{{ name }}{value/scalar, multiplier, offset};
}

sakurajin::unit_system::{{ name }} sakurajin::unit_system::{{ name }}::operator+(const sakurajin::unit_system::{{ name }}& other) const{
    auto retval = convert_like(other);
    retval.value += other.value;
    return retval;
}

sakurajin::unit_system::{{ name }} sakurajin::unit_system::{{ name }}::operator-(const sakurajin::unit_system::{{ name }}& other) const{
    auto retval = convert_like(other);
    retval.value -= other.value;
    return retval;
}

sakurajin::unit_system::{{ name }} sakurajin::unit_system::{{ name }}::operator-() const{
    return sakurajin::unit_system::{{ name }}{-value,multiplier,offset};
}

sakurajin::unit_system::{{ name }}::operator long double() const{
    return convert_copy(1,0).value;
}

sakurajin::unit_system::{{ name }} sakurajin::unit_system::{{ name }}::convert_multiplier(long double new_multiplier) const{
    return convert_copy(new_multiplier, offset);
}

sakurajin::unit_system::{{ name }} sakurajin::unit_system::{{ name }}::convert_offset(long double new_offset) const{
    return convert_copy(multiplier, new_offset);
}

sakurajin::unit_system::{{ name }} sakurajin::unit_system::{{ name }}::convert_copy(long double new_multiplier, long double new_offset) const{
    auto valBase0 = value * multiplier + offset;
    sakurajin::unit_system::{{ name }} retval{valBase0/new_multiplier-new_offset, new_multiplier, new_offset};
    return retval;
}

sakurajin::unit_system::{{ name }} sakurajin::unit_system::{{ name }}::convert_like(const sakurajin::unit_system::{{ name }}& other) const{
    return convert_copy(other.multiplier, other.offset);
}

//comparison operators
{% if extra_data.has_std %}#if __cplusplus >= 202002L
int sakurajin::unit_system::{{ name }}::operator<=>(const sakurajin::unit_system::{{ name }}& other) const{
    const auto retval = sakurajin::unit_system::unit_cast(other,multiplier,offset);
    if(*this < retval){
        return -1;
    }

    if(*this > retval){
        return 1;
    }

    return 0;
}
#endif{% endif %}
bool sakurajin::unit_system::{{ name }}::operator<(const sakurajin::unit_system::{{ name }}& other) const{
    const auto retval = sakurajin::unit_system::unit_cast(other,multiplier,offset);
    return value < retval.value;
}

bool sakurajin::unit_system::{{ name }}::operator>(const sakurajin::unit_system::{{ name }}& other) const{
    const auto retval = sakurajin::unit_system::unit_cast(other,multiplier,offset);
    return value > retval.value;
}

bool sakurajin::unit_system::{{ name }}::operator<=(const sakurajin::unit_system::{{ name }}& other) const{
    const auto retval = sakurajin::unit_system::unit_cast(other,multiplier,offset);
    return value <= retval.value;
}

bool sakurajin::unit_system::{{ name }}::operator>=(const sakurajin::unit_system::{{ name }}& other) const{
    const auto retval = sakurajin::unit_system::unit_cast(other,multiplier,offset);
    return value >= retval.value;
}

bool sakurajin::unit_system::{{ name }}::operator==(const sakurajin::unit_system::{{ name }}& other) const{
    const auto retval = sakurajin::unit_system::unit_cast(other,multiplier,offset);
    return value == retval.value;
}

bool sakurajin::unit_system::{{ name }}::operator!=(const sakurajin::unit_system::{{ name }}& other) const{
    return ! (*this == other);
}

//non const member functions
void sakurajin::unit_system::{{ name }}::operator*=(long double scalar){
    value*=scalar;
}

void sakurajin::unit_system::{{ name }}::operator/=(long double scalar){
    value/=scalar;
}

void sakurajin::unit_system::{{ name }}::operator+=(const sakurajin::unit_system::{{ name }}& other){
    const auto otherVal = sakurajin::unit_system::unit_cast(other,multiplier,offset);
    value += otherVal.value;
}

void sakurajin::unit_system::{{ name }}::operator-=(const sakurajin::unit_system::{{ name }}& other){
    const auto otherVal = sakurajin::unit_system::unit_cast(other,multiplier,offset);
    value -= otherVal.value;
}

void sakurajin::unit_system::{{ name }}::operator=(const sakurajin::unit_system::{{ name }}& other){
    const auto otherVal = sakurajin::unit_system::unit_cast(other,multiplier,offset);
    value = otherVal.value;
}

{% if divisions|length > 0 %}{% for div in divisions %}
sakurajin::unit_system::{{ div.result }} sakurajin::unit_system::{{ name }}::operator/(const sakurajin::unit_system::{{ div.divisor }}& other) const{
    sakurajin::unit_system::{{ name }} _v1 = convert_offset(0);
    sakurajin::unit_system::{{ div.divisor }} _v2 = other.convert_offset(0);
    return sakurajin::unit_system::{{ div.result }}{_v1.value/_v2.value,_v1.multiplier/_v2.multiplier};
}
{% endfor %}{% endif %}

{% if multiplications|length > 0 %}{% for mult in multiplications %}
sakurajin::unit_system::{{ mult.product }} sakurajin::unit_system::{{ name }}::operator*(const sakurajin::unit_system::{{ mult.factor }}& other) const{
    sakurajin::unit_system::{{ name }} _v1 = convert_offset(0);
    sakurajin::unit_system::{{ mult.factor }} _v2 = other.convert_offset(0);
    return sakurajin::unit_system::{{ mult.product }}{_v1.value*_v2.value,_v1.multiplier*_v2.multiplier};
}
{% endfor %}{% endif %}

{% if sqrt_result != '' %}
sakurajin::unit_system::{{ sqrt_result }} sakurajin::unit_system::{{ name }}::sqrt() const{
    return sakurajin::unit_system::{{ sqrt_result }}{ {{ extra_data.sqrt_function }}(value), {{ extra_data.sqrt_function }}(multiplier), offset};
}
{% endif %}

{% if square_result != '' %}
sakurajin::unit_system::{{ square_result }} sakurajin::unit_system::{{ name }}::square() const{
    return sakurajin::unit_system::{{ square_result }}{value*value, multiplier*multiplier, offset};
}
{% endif %}

// external functions

sakurajin::unit_system::{{ name }} sakurajin::unit_system::operator*(long double scalar, const sakurajin::unit_system::{{ name }}& value){
    return value*scalar;
}

{% if sqrt_result != '' %}
sakurajin::unit_system::{{ sqrt_result }} sakurajin::unit_system::sqrt(const {{ name}}& unit){return unit.sqrt();}
{% endif %}

{% if square_result != '' %}
sakurajin::unit_system::{{ square_result }} sakurajin::unit_system::square(const {{ name}}& unit){return unit.square();}
{% endif %}

sakurajin::unit_system::{{ name }} sakurajin::unit_system::unit_cast(const sakurajin::unit_system::{{ name }}& unit, long double new_multiplier, long double new_offset){
    return unit.convert_copy(new_multiplier, new_offset);
}

sakurajin::unit_system::{{ name }} sakurajin::unit_system::clamp(const sakurajin::unit_system::{{ name }}& unit, const sakurajin::unit_system::{{ name }}& lower, const sakurajin::unit_system::{{ name }}& upper){
    auto _lower = unit_cast(lower, unit.multiplier, unit.offset);
    auto _upper = unit_cast(upper, unit.multiplier, unit.offset);

    auto val = unit.value > _lower.value ? ( unit.value < _upper.value ? unit.value : _upper.value ) : _lower.value;
    return sakurajin::unit_system::{{ name }}{val, unit.multiplier, unit.offset};
}

{% if extra_data.has_std %}
sakurajin::unit_system::{{ name }} std::abs(const sakurajin::unit_system::{{ name }}& unit){
    auto inv = -unit;
    return unit > inv ? unit : inv;
}

std::ostream& sakurajin::unit_system::operator<<(std::ostream& os, const sakurajin::unit_system::{{ name }}& t){
    auto t1 = sakurajin::unit_system::unit_cast(t,1);
    return os << t1.value << " {{ base_name }}";
}
{% endif %}

// literals
{% if literals|length > 0 %}
{% for literal in literals %}
sakurajin::unit_system::{{ name }} sakurajin::unit_system::literals::operator "" _{{ literal.code_literal }}(long double len){
    return sakurajin::unit_system::{{ name }}{len,{{ literal.multiplier }}, {{ literal.offset }}};
}

sakurajin::unit_system::{{ name }} sakurajin::unit_system::literals::operator "" _{{ literal.code_literal }}(unsigned long long int len){
    return sakurajin::unit_system::{{ name }}{static_cast<long double>(len),{{ literal.multiplier }}, {{ literal.offset }}};
}
{% endfor %}
{% endif %}
