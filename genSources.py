import os.path
import argparse
from pathlib import Path

import generators.targets

# comments mostly generated by ChatGPT from openai and tweaked by me

# This block of code will only be executed if this script is run directly,
# rather than being imported by another script.
if __name__ == "__main__":
    # define the message that will be displayed when the user runs the script with the -h flag
    msg = "A code generator for the unit system library.\n"
    msg += "This script generates all units and contains all of the unit definitions."

    # create an ArgumentParser object to parse command line arguments
    parser = argparse.ArgumentParser(
        description=msg
    )

    # create an archive flag, which is a flag to directly produce a release archive
    parser.add_argument(
        "--archive",
        help="give this flag to generate a tar.zstd archive of the output directory",
        required=False,
        default=False,
        dest='archive',
        action='store_true',
    )

    # define the 'outDir' argument, which is optional, should be a string, and has a default value of ''
    parser.add_argument(
        "--outDir",
        "-o",
        help="Put all files in the same given directory. This overwrites the baseDir.",
        required=False,
        default='',
        dest='outDir',
        type=str,
    )

    # define the 'printOutFiles' argument, which is a flag that indicates whether
    # the generated files should be printed
    parser.add_argument(
        "--printOutFiles",
        help="set to true if the generated file should be print",
        required=False,
        default=False,
        dest='printOutFiles',
        action='store_true',
    )

    parser.add_argument(
        "--no_format",
        help="set this flag to disable running the formatter on the generated files",
        required=False,
        default=True,
        dest='format_sources',
        action='store_false',
    )

    # add a subparser to select the target for the code generator
    subparser_manager = parser.add_subparsers(help="generator target", dest="target")
    generators.targets.init_subparser(subparser_manager)

    # parse the command line arguments
    args = vars(parser.parse_args())

    # get the directory containing the script
    main_script_dir = Path(os.path.dirname(__file__)).absolute().expanduser()

    if args['outDir'] == '':
        base_dir = main_script_dir / ('output_' + args['target'])
    else:
        base_dir = main_script_dir / args['outDir']

    # if the 'genArduino' flag is set to True, use the arduino generator
    # otherwise, use the meson generator
    generator_target = generators.targets.get_target(
        version='0.7.1',
        main_script_dir=main_script_dir,
        output_dir=base_dir,
        print_files=args['printOutFiles'],
        target_name=args['target'],
    )

    generator_target.generate()

    if args['format_sources']:
        generator_target.format()

    if args['archive']:
        generator_target.archive()
